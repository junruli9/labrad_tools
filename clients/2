from PyQt4 import QtGui, QtCore, Qt
from PyQt4.QtCore import pyqtSignal 
from connection import connection
from twisted.internet.defer import inlineCallbacks


class SequencerButton(QtGui.QPushButton):
    def __init__(self, initial_state):
        super(SequencerButton, self).__init__(None)
        self.setCheckable(1)
        self.setChecked(initial_state)

class DurationBox(QtGui.QDoubleSpinBox):
    def __init__(self, initial_duration):
        super(DurationBox,  self).__init__(None)
        self.setButtonSymbols(QtGui.QAbstractSpinBox.NoButtons)
        self.setDecimals(3)
        self.setValue(initial_duration)

class LogicColumn(QtGui.QWidget):
    def __init__(self, initial_logic, initial_duration):
        super(LogicColumn, self).__init__(None)
        self.populate(initial_logic, initial_duration)

    def populate(self, logic, duration):
        self.duration_box = DurationBox(duration) 
        self.sequencer_buttons = [SequencerButton(l) for l in logic]
        self.layout = QtGui.QVBoxLayout()
        self.layout.setSpacing(0)
        self.layout.addWidget(self.duration_box)
        for sb in self.sequencer_buttons:
            self.layout.addWidget(sb)
        self.setLayout(self.layout)

    def get_logic(self):
        return (self.duration_box.value(), [sb.isFlat() for sb in self.sequencer_buttons])

class NameBox(QtGui.QLabel):
    def __init__(self, name):
        super(NameBox, self).__init__(None)
        self.setText(name)

class NameColumn(QtGui.QWidget):
    def __init__(self, names):
        super(NameColumn, self).__init__(None)
        self.populate(names)

    def populate(self, names):
        self.name_boxes = [NameBox(n) for n in names]
        self.layout = QtGui.QVBoxLayout()
        self.layout.setSpacing(0)
        for nb in self.name_boxes:
            self.layout.addWidget(nb)
        self.setLayout(self.layout)

class SequencerClient(QtGui.QWidget):
    def __init__(self, reactor, cxn=None):
        super(SequencerClient, self).__init__(None)    
        self.server_name = 'sequencer' 
        self.reactor =  reactor
        self.cxn = cxn
        #self.connect()
        self.populate() # not for real

    @inlineCallbacks
    def connect(self):
        if self.cxn is None:
            self.cxn = connection()
            yield self.cxn.connect()
        self.context = yield self.cxn.context()
        try:
            #self.get_configuration()
            self.populate()
        except Exception, e:
            print e
            self.setDisabled(True)

    @inlineCallbacks
    def get_configuration(self):
        server = yield self.cxn.get_server(self.server_name)
        config_str = yield server.get_configuration()
        self.config = eval(config_str)

    def populate(self):
        init_logics = [[True, True, True], [True, False, True]]
        init_durations = [2.0, 3.0]
        names = ['', 'a', 'b', 'c']

        self.name_column = NameColumn(names)
        self.logic_columns = [LogicColumn(l, t) for l, t in zip(init_logics, init_durations)]
        self.layout = QtGui.QHBoxLayout()
        self.layout.setSpacing(0)
        self.layout.addWidget(self.name_column)
        for lc in self.logic_columns:
            self.layout.addWidget(lc)
        self.setLayout(self.layout)

if __name__ == '__main__':
    a = QtGui.QApplication([])
    import qt4reactor 
    qt4reactor.install()
    from twisted.internet import reactor
    widget = SequencerClient(reactor)
    widget.show()
    reactor.run()
